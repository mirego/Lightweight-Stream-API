plugins {
    id 'java-library'
    id 'me.champeau.gradle.jmh'
    id 'mirego.publish' version '1.0'
    id 'mirego.release' version '1.13'
    id 'mirego.j2objc' version '1.66'
}

archivesBaseName = 'stream'
group = 'com.mirego.annimon'

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

if (!hasProperty('mainClass')) {
    ext.mainClass = ''
}

repositories {
    mavenLocal()
    jcenter()
    delegate.miregoPublic()
}

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
    testImplementation 'org.slf4j:slf4j-log4j12:1.7.30'
    testImplementation project(':streamTest')
}

cobertura {
    coverageExcludes = ['.*com\\.annimon\\.stream\\.internal\\.Compat.*']
}

jmh {
    benchmarkMode = ['Throughput']
    fork = 2
    threads = 2
    warmupIterations = 3
    iterations = 5
}

task sourceJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allJava
}

j2objc {
    version = '2.4'
    supportedVersions = ['1.0.0.2', '2.4', '2.5']

    podName = 'lightweight-stream-api'
    podspecFile = "../${j2objc.podName}.podspec"

    generatedDir = "../${project.name}-j2objc"
    generatedTargetDir = "${project.name}-j2objc"

    prefixes = [
            'com.annimon.stream.*': 'CAS'
    ]

    options = '-encoding UTF-8 -Werror --build-closure --doc-comments --generate-deprecated -J-Xmx2G --nullability --swift-friendly'
}

release {
    checkTasks = ['check']
    buildTasks = ['publish', 'j2objc_repo_push_quick']

    updateVersionPart = 2

    tagPrefix = 'lightweight-stream-'
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact j2objc_zip
        }
    }
}

task generateHeaderMappingFile {
    doLast {
        def metaInfFolder = new File(sourceSets.main.output.resourcesDir, "META-INF/")
        def mappingFile = new File(metaInfFolder, "lightweight-stream-api-header-mapping.j2objc")
        def rootDir = sourceSets.main.allJava.srcDirs[0]
        sourceSets.main.allJava.sourceDirectories.asFileTree.files.each {
            def filePath = it.toString().substring(rootDir.toString().size(), it.toString().size() - ".java".size())
            mappingFile << "${filePath.substring(1).replaceAll("/", ".")}=${filePath.substring(1)}.h\n"
        }
	}
}

tasks['j2objc_prefixes'].finalizedBy generateHeaderMappingFile
